<?xml version="1.0"?>
<configuration>
  <configSections>
    <section name="microsoft.identityModel" type="Microsoft.IdentityModel.Configuration.MicrosoftIdentityModelSection, Microsoft.IdentityModel, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
  </configSections>
  <appSettings>
    <add key="TrustFabricDocument" value="TrustFabric\gfipm-trust-fabric-model2-sample-signed.xml"/>

    <!-- Working 3-15-2012 -->
    <!-- https endpoint -->
    <!-- NOTE: Having both Transport (HTTPS) and Message (XMLSIG) security creates 2 IClaimsIdentity with the same claims -->
    <add key="WspEndpointName" value="WspSecureEndpoint"/>

    <!-- Endpoint Address Configuration - ha50wspm2 -->
    <add key="WspAppliesTo" value="https://ha50wspm2:8553/Model2/CommercialVehicleCollisionWsp.svc"/>


    <!-- Certificate Configuration - ha50wscm2 -->
    <!-- WSC Proxy Service Certificate Thumbprint -->
    <add key="WscServiceCertificateThumbprint" value="a3 40 3a 26 b0 b1 d2 98 a7 63 f7 5d c4 ad 13 9e b2 82 3a bb"/>
    
    <!-- Metro -->
    <!-- https endpoint -->
    <!--<add key="WspEndpointName" value="CommercialVehicleCollisionBackendService-MetroWspM2"/>-->

    <!-- Endpoint Address Configuration - ha50wspm2 -->
    <!--<add key="WspAppliesTo" value="https://curewspm2:8181/m2wsp/services/cvc"/>-->




    <!-- TEST Delegate Chain 3-15-2012 -->
    <!--<add key="WspEndpointName" value="CommercialVehicleCollisionBackendService-SenderVouches-AsymmetricBinding-Https-DelegateChain-WSC"/>
    <add key="SenderVouchesAppliesTo" value="https://ha50wscm2:8645/WspWsc/CommercialVehicleCollisionWspDelegate.svc"/>-->


    <!-- Metro -->
    <!-- http endpoint -->

    <!--<add key="WspEndpointName" value="CommercialVehicleCollisionBackendService-MetroWsp" />
    <add key="WspAppliesTo" value="http://curewsp:8080/m2wsp/services/cvc" />-->

    <!-- Working -->
    <!-- https endpoint -->
    <!--<add key="WspEndpointName" value="CommercialVehicleCollisionBackendService-MetroWsp-Https" />
    <add key="WspAppliesTo" value="https://curewsp:8181/m2wsp/services/cvc" />-->

  </appSettings>
  <system.web>
    <!-- .Net 3.5 -->
    <compilation debug="false">
      <assemblies>
        <add assembly="Microsoft.IdentityModel, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
      </assemblies>
    </compilation>
    <customErrors mode="Off"/>

  </system.web>
  <system.serviceModel>
    <client>
      <!-- Working 4-10-2012 -->
      <!-- Endpoint Address Configuration - ha50wspm2 -->
      <endpoint name="WspSecureEndpoint"
               address="https://ha50wspm2:8553/Model2/CommercialVehicleCollisionWsp.svc"
               binding="wspCustomSecuredBinding"
               behaviorConfiguration="WspSecureEndpointEndpointBehavior"
               contract="ICommercialVehicleCollisionPortType">
        <!-- When using Common.CustomIdentityVerifier the following <identity> element is not needed -->
        <identity>
          <!-- Certificate Configuration - ha50wspm2 -->
          <certificateReference findValue="9c 9c 76 8a 55 52 ad 54 f0 20 d3 8b d2 d9 db 69 25 b6 f6 3a"
                      storeLocation="LocalMachine" storeName="TrustedPeople" x509FindType="FindByThumbprint"/>
        </identity>
      </endpoint>


      <!-- TEST Delegate Chain 3-15-2012-->
      <!-- Wsp HTTPs Endpoint-->
      <endpoint name="CommercialVehicleCollisionBackendService-SenderVouches-AsymmetricBinding-Https-DelegateChain-WSC"
               address="https://ha50wsc:8645/WspWsc/CommercialVehicleCollisionWspDelegate.svc"
               binding="wspCustomSecuredBinding"
               behaviorConfiguration="WspSecureEndpointEndpointBehavior"
               contract="ICommercialVehicleCollisionPortType">
        <identity>
          <certificateReference findValue="7d 26 33 58 ad a6 92 ce 6c 7f 2a 92 70 b0 06 44 56 4e 8c b9"
                      storeLocation="LocalMachine" storeName="TrustedPeople" x509FindType="FindByThumbprint"/>
        </identity>
      </endpoint>

      <!-- Metro Model 2 WSP-->
      <!--TODO: If this is the working model, check if it can be moved to a generic programmatic model-->

      <!-- Endpoint Address Configuration - curewspm2 -->
      <endpoint name="CommercialVehicleCollisionBackendService-MetroWspM2"
                address="https://curewspm2:8181/m2wsp/services/cvc"
                binding="wspCustomSecuredBinding"
                behaviorConfiguration="WspSecureEndpointEndpointBehavior"
                contract="ICommercialVehicleCollisionPortType">
        <identity>
          <!-- Certificate Configuration - curewspm2 -->
          <certificateReference findValue="03 84 a7 cd 37 f9 e2 28 1e 5f c0 b2 36 17 66 55 8a 7e 8c 3f"
                                storeLocation="LocalMachine" storeName="TrustedPeople" x509FindType="FindByThumbprint"/>
        </identity>
      </endpoint>

    </client>
    <services>
      <service name="WebServiceConsumer.WebServiceConsumer" behaviorConfiguration="WscFrontendServiceBehavior">
        <!-- Service Endpoints -->
        <endpoint name="CommercialVehicleCollisionFrontendService" address="" binding="customBinding" bindingConfiguration="NetFrontendFederationBinding"
                  bindingNamespace="urn:examples.com:techniques:iepd:commercialVehicleCollision:ws:2.0" contract="ICommercialVehicleCollisionPortType"/>
        <endpoint address="mex" binding="mexHttpsBinding" bindingNamespace="urn:examples.com:techniques:iepd:commercialVehicleCollision:ws:2.0" contract="IMetadataExchange"/>

        <!-- Enable this endpoint for HOK assertions -->
        <!--<endpoint name="CommercialVehicleCollisionFrontendService" address="" binding="ws2007FederationHttpBinding" bindingConfiguration="HolderOfKey"
                bindingNamespace="urn:examples.com:techniques:iepd:commercialVehicleCollision:ws:2.0" contract="ICommercialVehicleCollisionPortType"/>
        <endpoint address="mex" binding="mexHttpBinding" bindingNamespace="urn:examples.com:techniques:iepd:commercialVehicleCollision:ws:2.0" contract="IMetadataExchange"/>-->
      </service>
    </services>
    <bindings>

      <wspCustomSecuredBinding enableStrTransform="True" />

      <customBinding>
        <!-- Backend Service Binding SECURED-->
        <binding name="CustomSecureBinding_BackendService">
          <security authenticationMode="IssuedTokenForCertificate" requireDerivedKeys="true" includeTimestamp="true" keyEntropyMode="CombinedEntropy" messageProtectionOrder="SignBeforeEncrypt" defaultAlgorithmSuite="Basic256" messageSecurityVersion="WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10" requireSignatureConfirmation="false">

            <!-- Original Sender-Vouches or Bearer confirmation -->
            <issuedTokenParameters
              useStrTransform="false"
              defaultMessageSecurityVersion="WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10"
              keyType="BearerKey"
              tokenType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0"
              keySize="0">

              <!--IS THIS NEEDED?-->
              <!-- .Net 3.5 -->
              <!--<issuer address="http://ha50idp:8089/ADS-STS/Issue.svc" binding="customBinding" bindingConfiguration="ADS-CustomSecureTransport">-->
              <!-- .Net 4.0 -->

              <!-- Endpoint Address Configuration - ha50idpm2 -->
              <issuer address="https://ha50idpm2:8543/ADS-STS/Issue.svc" binding="customBinding" bindingConfiguration="ADS-CustomSecureTransportBinding">
                <!-- Do I need to add this to the behavior extension-->

                <!-- Certificate Configuration - ha50idpm2 -->
                <identity>
                  <certificateReference findValue="d4 4f ce 24 89 51 15 2f 74 00 17 a1 b2 ef 8a 00 d3 08 c8 e2"
                                        storeLocation="LocalMachine" storeName="TrustedPeople" x509FindType="FindByThumbprint"/>
                </identity>
              </issuer>
              <!-- .Net 3.5 -->
              <!--<issuerMetadata address="http://ha50idp:8089/ADS-STS/Issue.svc/mex"/>-->
              <!-- .Net 4.0 -->
              <!-- Endpoint Address Configuration - ha50idpm2 -->
              <issuerMetadata address="https://ha50idpm2:8543/ADS-STS/Issue.svc/mex"/>
            </issuedTokenParameters>
            <localClientSettings cacheCookies="true" detectReplays="true" replayCacheSize="900000" maxClockSkew="00:05:00" maxCookieCachingTime="Infinite" replayWindow="00:05:00" sessionKeyRenewalInterval="10:00:00" sessionKeyRolloverInterval="00:05:00" reconnectTransportOnFailure="true" timestampValidityDuration="00:05:00" cookieRenewalThresholdPercentage="60"/>
            <localServiceSettings detectReplays="true" issuedCookieLifetime="10:00:00" maxStatefulNegotiations="128" replayCacheSize="900000" maxClockSkew="00:05:00" negotiationTimeout="00:01:00" replayWindow="00:05:00" inactivityTimeout="00:02:00" sessionKeyRenewalInterval="15:00:00" sessionKeyRolloverInterval="00:05:00" reconnectTransportOnFailure="true" maxPendingSessions="128" maxCachedCookies="1000" timestampValidityDuration="00:05:00"/>
          </security>
          <mtomMessageEncoding maxReadPoolSize="64" maxWritePoolSize="16" messageVersion="Soap11WSAddressing10" writeEncoding="utf-8">
            <readerQuotas maxDepth="32" maxStringContentLength="8192" maxArrayLength="2000000000" maxBytesPerRead="4096" maxNameTableCharCount="16384"/>
          </mtomMessageEncoding>
          <!-- .Net 3.5 -->
          <!-- Working -->
          <!--<httpTransport manualAddressing="false" maxBufferPoolSize="524288" maxReceivedMessageSi`ze="200000000" allowCookies="false" authenticationScheme="Anonymous" bypassProxyOnLocal="false" hostNameComparisonMode="StrongWildcard" keepAliveEnabled="true" maxBufferSize="200000000" proxyAuthenticationScheme="Anonymous" realm="" transferMode="Buffered" unsafeConnectionNtlmAuthentication="false" useDefaultWebProxy="true"/>-->
          <!-- .Net 4.0 -->
          <httpTransport manualAddressing="false" maxBufferPoolSize="524288" maxReceivedMessageSize="200000000" allowCookies="false" authenticationScheme="Anonymous" bypassProxyOnLocal="false" hostNameComparisonMode="StrongWildcard" keepAliveEnabled="true" maxBufferSize="200000000" proxyAuthenticationScheme="Anonymous" realm="" transferMode="Buffered" unsafeConnectionNtlmAuthentication="false" useDefaultWebProxy="true"/>
        </binding>

        <!-- WSC as a non-GFIPM WSP -->
        <binding name="NetFrontendFederationBinding">
          <security authenticationMode="IssuedTokenOverTransport"  requireSignatureConfirmation="false" 
                    messageSecurityVersion="WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10">
          
            <issuedTokenParameters defaultMessageSecurityVersion="WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10" 
                                   tokenType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0" keyType="BearerKey" keySize="0">

              <!-- Endpoint Address Configuration - ha50idpm2 -->
              <!--<issuer address="http://ha50idpm2:8080/Model2UserSts/Issue.svc" binding="IdpStsCustomSecuredBinding"/>-->
          
              <!-- Endpoint Address Configuration - ha50idpm2 -->
              <issuerMetadata  address="http://ha50idpm2:8080/Model2UserSts/Issue.svc/mex"/>
              <!--<issuerMetadata address="https://ha50idp:8544/IDP-STS/Issue.svc/mex"/>-->

            </issuedTokenParameters>
          </security>
          <mtomMessageEncoding />
          <httpsTransport maxReceivedMessageSize="200000000" maxBufferSize="200000000"/>
        </binding>

        <binding name="MetroFrontendFederationBinding">
          <security authenticationMode="IssuedTokenOverTransport"  requireSignatureConfirmation="false"
                    messageSecurityVersion="WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10">
            <issuedTokenParameters defaultMessageSecurityVersion="WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10" keyType="BearerKey" tokenType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0" keySize="0">

              <!-- Endpoint Address Configuration - ha50idpm2 -->
              <!--<issuer address="http://ha50idpm2:8080/IDP-STS/Issue.svc" binding="IdpStsCustomSecuredBinding"/>-->

              <!-- Endpoint Address Configuration - ha50idpm2 -->
              <issuerMetadata address="http://ha50idpm2:8080/IDP-STS/Issue.svc/mex"/>
            </issuedTokenParameters>
          </security>
          <mtomMessageEncoding/>
          <httpsTransport maxReceivedMessageSize="200000000" maxBufferSize="200000000"/>
        </binding>

      </customBinding>

      <ws2007FederationHttpBinding>
        <binding name="HolderOfKey">
          <security mode="Message">
            <message negotiateServiceCredential="false"  
                     issuedTokenType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0"
                      issuedKeyType="SymmetricKey">
            </message>
          </security>
        </binding>
      </ws2007FederationHttpBinding>

      
    </bindings>
    <behaviors>
      <serviceBehaviors>
        <behavior name="WscFrontendServiceBehavior">
          <!-- Behavior extension to make the service claims aware -->
          <federatedServiceHostConfiguration/>
          <!-- To avoid disclosing metadata information, set the value below to false and remove the metadata endpoint above before deployment -->
          <serviceMetadata httpGetEnabled="true"/>
          <!--<serviceMetadata  httpGetEnabled="true"/>-->
          <!-- To receive exception details in faults for debugging purposes, set the value below to true.  Set to false before deployment to avoid disclosing exception information -->
          <serviceDebug includeExceptionDetailInFaults="true"/>
          <serviceCredentials>
            <!-- Certificate Configuration - ha50wscm2 -->
            <serviceCertificate findValue="a3 40 3a 26 b0 b1 d2 98 a7 63 f7 5d c4 ad 13 9e b2 82 3a bb"
                                storeLocation="LocalMachine" storeName="My" x509FindType="FindByThumbprint"/>
            <clientCertificate>
              <authentication certificateValidationMode="Custom" customCertificateValidatorType="Common.CustomX509CertificateValidator, Common" trustedStoreLocation="LocalMachine"/>
            </clientCertificate>
          </serviceCredentials>
        </behavior>
      </serviceBehaviors>
      <endpointBehaviors>
        <!-- CHECK! -->
        <behavior name="BackEndServiceClientCertificate">
          <clientCredentials>

            <!-- Certificate Configuration - ha50wscm2 -->
            <clientCertificate findValue="a3 40 3a 26 b0 b1 d2 98 a7 63 f7 5d c4 ad 13 9e b2 82 3a bb" storeLocation="LocalMachine"
                               storeName="My" x509FindType="FindByThumbprint"/>
            <serviceCertificate>
              <authentication certificateValidationMode="PeerTrust"/>
            </serviceCertificate>
          </clientCredentials>
        </behavior>

      
        <!-- Current WSP endpoint behavior -->
        <behavior name="WspSecureEndpointEndpointBehavior">
          <clientCredentials>

            <!-- Certificate Configuration - ha50wscm2 -->
            <clientCertificate findValue="a3 40 3a 26 b0 b1 d2 98 a7 63 f7 5d c4 ad 13 9e b2 82 3a bb"
                               storeLocation="LocalMachine" storeName="My" x509FindType="FindByThumbprint"/>
            <serviceCertificate>
              <authentication certificateValidationMode="Custom" customCertificateValidatorType="Common.CustomX509CertificateValidator, Common" trustedStoreLocation="LocalMachine"/>
            </serviceCertificate>
          </clientCredentials>
        </behavior>

      </endpointBehaviors>
    </behaviors>
    <extensions>
      <bindingExtensions>
        <add name="wspCustomSecuredBinding" type="Common.WspCustomSecuredBindingCollectionElement, Common"/>
        <add name="IdpStsCustomSecuredBinding" type="Common.IdpStsCustomSecuredBindingCollectionElement, Common"/>
      </bindingExtensions>

      <behaviorExtensions>
        <!-- This behavior extension will enable the service host to be Claims aware -->
        <add name="federatedServiceHostConfiguration" type="Microsoft.IdentityModel.Configuration.ConfigureServiceHostBehaviorExtensionElement, Microsoft.IdentityModel, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
      </behaviorExtensions>

    </extensions>
    <diagnostics>
      <messageLogging logEntireMessage="true" logMalformedMessages="true" logMessagesAtServiceLevel="true"
                      logMessagesAtTransportLevel="true" maxMessagesToLog="3000" maxSizeOfMessageToLog="524288"/>
    </diagnostics>
  </system.serviceModel>
  <microsoft.identityModel>
    <service saveBootstrapTokens="true">
      <audienceUris>
        <!-- TODO This needs to have the WSC entityID, not the endpoint address-->
        <!-- This is not required by the GFIPM spec -->

        <!-- Endpoint Address Configuration - ha50idpm2 -->
        <add value="https://ha50wscm2:8643/Model2/Service.svc"/>
        <add value="http://ha50wscm2:8089/Model2/Service.svc"/>

        <add value="ha50wscm2"/>
      </audienceUris>

      <issuerNameRegistry type="WebServiceConsumerWebHost.WscTrustedIssuerNameRegistry, WebServiceConsumerWebHost"/>

    </service>
  </microsoft.identityModel>
  <system.webServer>
    <modules runAllManagedModulesForAllRequests="true"/>
  </system.webServer>
  <system.diagnostics>
    <sources>
      <source name="System.ServiceModel" switchValue="Critical,Error">
        <listeners>
          <add name="xml"/>
        </listeners>
      </source>
      <source name="System.ServiceModel.MessageLogging" switchValue="Critical,Error">
        <listeners>
          <add name="xml"/>
        </listeners>
      </source>
      <source name="Microsoft.IdentityModel" switchValue="Verbose">
        <listeners>
          <add name="wif"/>
        </listeners>
      </source>
      <source name="MyTraceSource" switchValue="Verbose, ActivityTracing">
        <listeners>
          <add name ="myListener"/>
        </listeners>
      </source>
    </sources>
    <sharedListeners>
      <add initializeData="C:\temp\Model2Wsc-MyTraceSource.log" type="System.Diagnostics.TextWriterTraceListener" name="myListener"/>
      <add initializeData="C:\temp\Model2Wsc-WcfLog.svclog" type="System.Diagnostics.XmlWriterTraceListener" name="xml"/>
      <add initializeData="C:\temp\WSC-WIF.svclog" type="System.Diagnostics.XmlWriterTraceListener" name="wif"/>
    </sharedListeners>
    <trace autoflush="true"/>
  </system.diagnostics>

  <startup>

    <supportedRuntime version="v2.0.50727"/>
  </startup>
</configuration>
